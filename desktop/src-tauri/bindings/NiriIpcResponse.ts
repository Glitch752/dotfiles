/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Successful response from niri to client.
 */
export type Response =
  | "Handled"
  | {
      Version: string;
    }
  | {
      Outputs: {
        [k: string]: Output;
      };
    }
  | {
      Workspaces: Workspace[];
    }
  | {
      Windows: Window[];
    }
  | {
      Layers: LayerSurface[];
    }
  | {
      KeyboardLayouts: KeyboardLayouts;
    }
  | {
      FocusedOutput: Output | null;
    }
  | {
      FocusedWindow: Window | null;
    }
  | {
      PickedWindow: Window | null;
    }
  | {
      PickedColor: PickedColor | null;
    }
  | {
      OutputConfigChanged: OutputConfigChanged;
    }
  | {
      OverviewState: Overview;
    };
/**
 * Output transform, which goes counter-clockwise.
 */
export type Transform = "Normal" | "90" | "180" | "270" | "Flipped" | "Flipped90" | "Flipped180" | "Flipped270";
/**
 * A layer-shell layer.
 */
export type Layer = "Background" | "Bottom" | "Top" | "Overlay";
/**
 * Keyboard interactivity modes for a layer-shell surface.
 */
export type LayerSurfaceKeyboardInteractivity = "None" | "Exclusive" | "OnDemand";
/**
 * Output configuration change result.
 */
export type OutputConfigChanged = "Applied" | "OutputWasMissing";

/**
 * Connected output.
 */
export interface Output {
  /**
   * Name of the output.
   */
  name: string;
  /**
   * Textual description of the manufacturer.
   */
  make: string;
  /**
   * Textual description of the model.
   */
  model: string;
  /**
   * Serial of the output, if known.
   */
  serial?: string | null;
  /**
   * Physical width and height of the output in millimeters, if known.
   *
   * @minItems 2
   * @maxItems 2
   */
  physical_size?: [number, number] | null;
  /**
   * Available modes for the output.
   */
  modes: Mode[];
  /**
   * Index of the current mode in [`Self::modes`].
   *
   * `None` if the output is disabled.
   */
  current_mode?: number | null;
  /**
   * Whether the output supports variable refresh rate.
   */
  vrr_supported: boolean;
  /**
   * Whether variable refresh rate is enabled on the output.
   */
  vrr_enabled: boolean;
  /**
   * Logical output information.
   *
   * `None` if the output is not mapped to any logical output (for example, if it is disabled).
   */
  logical?: LogicalOutput | null;
  [k: string]: unknown;
}
/**
 * Output mode.
 */
export interface Mode {
  /**
   * Width in physical pixels.
   */
  width: number;
  /**
   * Height in physical pixels.
   */
  height: number;
  /**
   * Refresh rate in millihertz.
   */
  refresh_rate: number;
  /**
   * Whether this mode is preferred by the monitor.
   */
  is_preferred: boolean;
  [k: string]: unknown;
}
/**
 * Logical output in the compositor's coordinate space.
 */
export interface LogicalOutput {
  /**
   * Logical X position.
   */
  x: number;
  /**
   * Logical Y position.
   */
  y: number;
  /**
   * Width in logical pixels.
   */
  width: number;
  /**
   * Height in logical pixels.
   */
  height: number;
  /**
   * Scale factor.
   */
  scale: number;
  /**
   * Transform.
   */
  transform: Transform;
  [k: string]: unknown;
}
/**
 * A workspace.
 */
export interface Workspace {
  /**
   * Unique id of this workspace.
   *
   * This id remains constant regardless of the workspace moving around and across monitors.
   *
   * Do not assume that workspace ids will always increase without wrapping, or start at 1. That is an implementation detail subject to change. For example, ids may change to be randomly generated for each new workspace.
   */
  id: number;
  /**
   * Index of the workspace on its monitor.
   *
   * This is the same index you can use for requests like `niri msg action focus-workspace`.
   *
   * This index *will change* as you move and re-order workspace. It is merely the workspace's current position on its monitor. Workspaces on different monitors can have the same index.
   *
   * If you need a unique workspace id that doesn't change, see [`Self::id`].
   */
  idx: number;
  /**
   * Optional name of the workspace.
   */
  name?: string | null;
  /**
   * Name of the output that the workspace is on.
   *
   * Can be `None` if no outputs are currently connected.
   */
  output?: string | null;
  /**
   * Whether the workspace currently has an urgent window in its output.
   */
  is_urgent: boolean;
  /**
   * Whether the workspace is currently active on its output.
   *
   * Every output has one active workspace, the one that is currently visible on that output.
   */
  is_active: boolean;
  /**
   * Whether the workspace is currently focused.
   *
   * There's only one focused workspace across all outputs.
   */
  is_focused: boolean;
  /**
   * Id of the active window on this workspace, if any.
   */
  active_window_id?: number | null;
  [k: string]: unknown;
}
/**
 * Toplevel window.
 */
export interface Window {
  /**
   * Unique id of this window.
   *
   * This id remains constant while this window is open.
   *
   * Do not assume that window ids will always increase without wrapping, or start at 1. That is an implementation detail subject to change. For example, ids may change to be randomly generated for each new window.
   */
  id: number;
  /**
   * Title, if set.
   */
  title?: string | null;
  /**
   * Application ID, if set.
   */
  app_id?: string | null;
  /**
   * Process ID that created the Wayland connection for this window, if known.
   *
   * Currently, windows created by xdg-desktop-portal-gnome will have a `None` PID, but this may change in the future.
   */
  pid?: number | null;
  /**
   * Id of the workspace this window is on, if any.
   */
  workspace_id?: number | null;
  /**
   * Whether this window is currently focused.
   *
   * There can be either one focused window or zero (e.g. when a layer-shell surface has focus).
   */
  is_focused: boolean;
  /**
   * Whether this window is currently floating.
   *
   * If the window isn't floating then it is in the tiling layout.
   */
  is_floating: boolean;
  /**
   * Whether this window requests your attention.
   */
  is_urgent: boolean;
  [k: string]: unknown;
}
/**
 * A layer-shell surface.
 */
export interface LayerSurface {
  /**
   * Namespace provided by the layer-shell client.
   */
  namespace: string;
  /**
   * Name of the output the surface is on.
   */
  output: string;
  /**
   * Layer that the surface is on.
   */
  layer: Layer;
  /**
   * The surface's keyboard interactivity mode.
   */
  keyboard_interactivity: LayerSurfaceKeyboardInteractivity;
  [k: string]: unknown;
}
/**
 * Configured keyboard layouts.
 */
export interface KeyboardLayouts {
  /**
   * XKB names of the configured layouts.
   */
  names: string[];
  /**
   * Index of the currently active layout in `names`.
   */
  current_idx: number;
  [k: string]: unknown;
}
/**
 * Color picked from the screen.
 */
export interface PickedColor {
  /**
   * Color values as red, green, blue, each ranging from 0.0 to 1.0.
   *
   * @minItems 3
   * @maxItems 3
   */
  rgb: [number, number, number];
  [k: string]: unknown;
}
/**
 * Overview information.
 */
export interface Overview {
  /**
   * Whether the overview is currently open.
   */
  is_open: boolean;
  [k: string]: unknown;
}
