/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Request from client to niri.
 */
export type Request =
  | "Version"
  | "Outputs"
  | "Workspaces"
  | "Windows"
  | "Layers"
  | "KeyboardLayouts"
  | "FocusedOutput"
  | "FocusedWindow"
  | "PickWindow"
  | "PickColor"
  | {
      Action: Action;
    }
  | {
      Output: {
        /**
         * Output name.
         */
        output: string;
        /**
         * Configuration to apply.
         */
        action: OutputAction;
        [k: string]: unknown;
      };
    }
  | "EventStream"
  | "ReturnError"
  | "OverviewState";
/**
 * Actions that niri can perform.
 */
export type Action =
  | {
      Quit: {
        /**
         * Skip the "Press Enter to confirm" prompt.
         */
        skip_confirmation: boolean;
        [k: string]: unknown;
      };
    }
  | {
      PowerOffMonitors: {
        [k: string]: unknown;
      };
    }
  | {
      PowerOnMonitors: {
        [k: string]: unknown;
      };
    }
  | {
      Spawn: {
        /**
         * Command to spawn.
         */
        command: string[];
        [k: string]: unknown;
      };
    }
  | {
      DoScreenTransition: {
        /**
         * Delay in milliseconds for the screen to freeze before starting the transition.
         */
        delay_ms?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      Screenshot: {
        /**
         * Whether to show the mouse pointer by default in the screenshot UI.
         */
        show_pointer: boolean;
        [k: string]: unknown;
      };
    }
  | {
      ScreenshotScreen: {
        /**
         * Write the screenshot to disk in addition to putting it in your clipboard.
         *
         * The screenshot is saved according to the `screenshot-path` config setting.
         */
        write_to_disk: boolean;
        /**
         * Whether to include the mouse pointer in the screenshot.
         */
        show_pointer: boolean;
        [k: string]: unknown;
      };
    }
  | {
      ScreenshotWindow: {
        /**
         * Id of the window to screenshot.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        /**
         * Write the screenshot to disk in addition to putting it in your clipboard.
         *
         * The screenshot is saved according to the `screenshot-path` config setting.
         */
        write_to_disk: boolean;
        [k: string]: unknown;
      };
    }
  | {
      ToggleKeyboardShortcutsInhibit: {
        [k: string]: unknown;
      };
    }
  | {
      CloseWindow: {
        /**
         * Id of the window to close.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      FullscreenWindow: {
        /**
         * Id of the window to toggle fullscreen of.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      ToggleWindowedFullscreen: {
        /**
         * Id of the window to toggle windowed fullscreen of.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      FocusWindow: {
        /**
         * Id of the window to focus.
         */
        id: number;
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowInColumn: {
        /**
         * Index of the window in the column.
         *
         * The index starts from 1 for the topmost window.
         */
        index: number;
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowPrevious: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnLeft: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnRight: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnFirst: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnLast: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnRightOrFirst: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnLeftOrLast: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumn: {
        /**
         * Index of the column to focus.
         *
         * The index starts from 1 for the first column.
         */
        index: number;
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowOrMonitorUp: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowOrMonitorDown: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnOrMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      FocusColumnOrMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowDown: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowUp: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowDownOrColumnLeft: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowDownOrColumnRight: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowUpOrColumnLeft: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowUpOrColumnRight: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowOrWorkspaceDown: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowOrWorkspaceUp: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowTop: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowBottom: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowDownOrTop: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWindowUpOrBottom: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnLeft: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnRight: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToFirst: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToLast: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnLeftOrToMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnRightOrToMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToIndex: {
        /**
         * New index for the column.
         *
         * The index starts from 1 for the first column.
         */
        index: number;
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowDownOrToWorkspaceDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowUpOrToWorkspaceUp: {
        [k: string]: unknown;
      };
    }
  | {
      ConsumeOrExpelWindowLeft: {
        /**
         * Id of the window to consume or expel.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      ConsumeOrExpelWindowRight: {
        /**
         * Id of the window to consume or expel.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      ConsumeWindowIntoColumn: {
        [k: string]: unknown;
      };
    }
  | {
      ExpelWindowFromColumn: {
        [k: string]: unknown;
      };
    }
  | {
      SwapWindowRight: {
        [k: string]: unknown;
      };
    }
  | {
      SwapWindowLeft: {
        [k: string]: unknown;
      };
    }
  | {
      ToggleColumnTabbedDisplay: {
        [k: string]: unknown;
      };
    }
  | {
      SetColumnDisplay: {
        /**
         * Display mode to set.
         */
        display: ColumnDisplay;
        [k: string]: unknown;
      };
    }
  | {
      CenterColumn: {
        [k: string]: unknown;
      };
    }
  | {
      CenterWindow: {
        /**
         * Id of the window to center.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      CenterVisibleColumns: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWorkspaceDown: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWorkspaceUp: {
        [k: string]: unknown;
      };
    }
  | {
      FocusWorkspace: {
        /**
         * Reference (index or name) of the workspace to focus.
         */
        reference: WorkspaceReferenceArg;
        [k: string]: unknown;
      };
    }
  | {
      FocusWorkspacePrevious: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToWorkspaceDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToWorkspaceUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToWorkspace: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        window_id?: number | null;
        /**
         * Reference (index or name) of the workspace to move the window to.
         */
        reference: WorkspaceReferenceArg;
        /**
         * Whether the focus should follow the moved window.
         *
         * If `true` (the default) and the window to move is focused, the focus will follow the window to the new workspace. If `false`, the focus will remain on the original workspace.
         */
        focus: boolean;
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToWorkspaceDown: {
        /**
         * Whether the focus should follow the target workspace.
         *
         * If `true` (the default), the focus will follow the column to the new workspace. If `false`, the focus will remain on the original workspace.
         */
        focus: boolean;
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToWorkspaceUp: {
        /**
         * Whether the focus should follow the target workspace.
         *
         * If `true` (the default), the focus will follow the column to the new workspace. If `false`, the focus will remain on the original workspace.
         */
        focus: boolean;
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToWorkspace: {
        /**
         * Reference (index or name) of the workspace to move the column to.
         */
        reference: WorkspaceReferenceArg;
        /**
         * Whether the focus should follow the target workspace.
         *
         * If `true` (the default), the focus will follow the column to the new workspace. If `false`, the focus will remain on the original workspace.
         */
        focus: boolean;
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToIndex: {
        /**
         * New index for the workspace.
         */
        index: number;
        /**
         * Reference (index or name) of the workspace to move.
         *
         * If `None`, uses the focused workspace.
         */
        reference?: WorkspaceReferenceArg | null;
        [k: string]: unknown;
      };
    }
  | {
      SetWorkspaceName: {
        /**
         * New name for the workspace.
         */
        name: string;
        /**
         * Reference (index or name) of the workspace to name.
         *
         * If `None`, uses the focused workspace.
         */
        workspace?: WorkspaceReferenceArg | null;
        [k: string]: unknown;
      };
    }
  | {
      UnsetWorkspaceName: {
        /**
         * Reference (index or name) of the workspace to unname.
         *
         * If `None`, uses the focused workspace.
         */
        reference?: WorkspaceReferenceArg | null;
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorDown: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorUp: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorPrevious: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitorNext: {
        [k: string]: unknown;
      };
    }
  | {
      FocusMonitor: {
        /**
         * Name of the output to focus.
         */
        output: string;
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorPrevious: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitorNext: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToMonitor: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        /**
         * The target output name.
         */
        output: string;
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorPrevious: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitorNext: {
        [k: string]: unknown;
      };
    }
  | {
      MoveColumnToMonitor: {
        /**
         * The target output name.
         */
        output: string;
        [k: string]: unknown;
      };
    }
  | {
      SetWindowWidth: {
        /**
         * Id of the window whose width to set.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        /**
         * How to change the width.
         */
        change: SizeChange;
        [k: string]: unknown;
      };
    }
  | {
      SetWindowHeight: {
        /**
         * Id of the window whose height to set.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        /**
         * How to change the height.
         */
        change: SizeChange;
        [k: string]: unknown;
      };
    }
  | {
      ResetWindowHeight: {
        /**
         * Id of the window whose height to reset.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      SwitchPresetColumnWidth: {
        [k: string]: unknown;
      };
    }
  | {
      SwitchPresetWindowWidth: {
        /**
         * Id of the window whose width to switch.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      SwitchPresetWindowHeight: {
        /**
         * Id of the window whose height to switch.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      MaximizeColumn: {
        [k: string]: unknown;
      };
    }
  | {
      SetColumnWidth: {
        /**
         * How to change the width.
         */
        change: SizeChange;
        [k: string]: unknown;
      };
    }
  | {
      ExpandColumnToAvailableWidth: {
        [k: string]: unknown;
      };
    }
  | {
      SwitchLayout: {
        /**
         * Layout to switch to.
         */
        layout: LayoutSwitchTarget;
        [k: string]: unknown;
      };
    }
  | {
      ShowHotkeyOverlay: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorLeft: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorRight: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorDown: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorUp: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorPrevious: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitorNext: {
        [k: string]: unknown;
      };
    }
  | {
      MoveWorkspaceToMonitor: {
        /**
         * The target output name.
         */
        output: string;
        /**
         * If `None`, uses the focused workspace.
         */
        reference?: WorkspaceReferenceArg | null;
        [k: string]: unknown;
      };
    }
  | {
      ToggleDebugTint: {
        [k: string]: unknown;
      };
    }
  | {
      DebugToggleOpaqueRegions: {
        [k: string]: unknown;
      };
    }
  | {
      DebugToggleDamage: {
        [k: string]: unknown;
      };
    }
  | {
      ToggleWindowFloating: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToFloating: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      MoveWindowToTiling: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      FocusFloating: {
        [k: string]: unknown;
      };
    }
  | {
      FocusTiling: {
        [k: string]: unknown;
      };
    }
  | {
      SwitchFocusBetweenFloatingAndTiling: {
        [k: string]: unknown;
      };
    }
  | {
      MoveFloatingWindow: {
        /**
         * Id of the window to move.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        /**
         * How to change the X position.
         */
        x: PositionChange;
        /**
         * How to change the Y position.
         */
        y: PositionChange;
        [k: string]: unknown;
      };
    }
  | {
      ToggleWindowRuleOpacity: {
        /**
         * Id of the window.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      SetDynamicCastWindow: {
        /**
         * Id of the window to target.
         *
         * If `None`, uses the focused window.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      SetDynamicCastMonitor: {
        /**
         * Name of the output to target.
         *
         * If `None`, uses the focused output.
         */
        output?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      ClearDynamicCastTarget: {
        [k: string]: unknown;
      };
    }
  | {
      ToggleOverview: {
        [k: string]: unknown;
      };
    }
  | {
      OpenOverview: {
        [k: string]: unknown;
      };
    }
  | {
      CloseOverview: {
        [k: string]: unknown;
      };
    }
  | {
      ToggleWindowUrgent: {
        /**
         * Id of the window to toggle urgent.
         */
        id: number;
        [k: string]: unknown;
      };
    }
  | {
      SetWindowUrgent: {
        /**
         * Id of the window to set urgent.
         */
        id: number;
        [k: string]: unknown;
      };
    }
  | {
      UnsetWindowUrgent: {
        /**
         * Id of the window to unset urgent.
         */
        id: number;
        [k: string]: unknown;
      };
    };
/**
 * How windows display in a column.
 */
export type ColumnDisplay = "Normal" | "Tabbed";
/**
 * Workspace reference (id, index or name) to operate on.
 */
export type WorkspaceReferenceArg =
  | {
      Id: number;
    }
  | {
      Index: number;
    }
  | {
      Name: string;
    };
/**
 * Change in window or column size.
 */
export type SizeChange =
  | {
      SetFixed: number;
    }
  | {
      SetProportion: number;
    }
  | {
      AdjustFixed: number;
    }
  | {
      AdjustProportion: number;
    };
/**
 * Layout to switch to.
 */
export type LayoutSwitchTarget =
  | "Next"
  | "Prev"
  | {
      Index: number;
    };
/**
 * Change in floating window position.
 */
export type PositionChange =
  | {
      SetFixed: number;
    }
  | {
      AdjustFixed: number;
    };
/**
 * Output actions that niri can perform.
 */
export type OutputAction =
  | "Off"
  | "On"
  | {
      Mode: {
        /**
         * Mode to set, or "auto" for automatic selection.
         *
         * Run `niri msg outputs` to see the available modes.
         */
        mode: ModeToSet;
        [k: string]: unknown;
      };
    }
  | {
      Scale: {
        /**
         * Scale factor to set, or "auto" for automatic selection.
         */
        scale: ScaleToSet;
        [k: string]: unknown;
      };
    }
  | {
      Transform: {
        /**
         * Transform to set, counter-clockwise.
         */
        transform: Transform;
        [k: string]: unknown;
      };
    }
  | {
      Position: {
        /**
         * Position to set, or "auto" for automatic selection.
         */
        position: PositionToSet;
        [k: string]: unknown;
      };
    }
  | {
      Vrr: {
        /**
         * Variable refresh rate mode to set.
         */
        vrr: VrrToSet;
        [k: string]: unknown;
      };
    };
/**
 * Output mode to set.
 */
export type ModeToSet =
  | "Automatic"
  | {
      Specific: ConfiguredMode;
    };
/**
 * Output scale to set.
 */
export type ScaleToSet =
  | "Automatic"
  | {
      Specific: number;
    };
/**
 * Output transform, which goes counter-clockwise.
 */
export type Transform = "Normal" | "90" | "180" | "270" | "Flipped" | "Flipped90" | "Flipped180" | "Flipped270";
/**
 * Output position to set.
 */
export type PositionToSet =
  | "Automatic"
  | {
      Specific: ConfiguredPosition;
    };

/**
 * Output mode as set in the config file.
 */
export interface ConfiguredMode {
  /**
   * Width in physical pixels.
   */
  width: number;
  /**
   * Height in physical pixels.
   */
  height: number;
  /**
   * Refresh rate.
   */
  refresh?: number | null;
  [k: string]: unknown;
}
/**
 * Output position as set in the config file.
 */
export interface ConfiguredPosition {
  /**
   * Logical X position.
   */
  x: number;
  /**
   * Logical Y position.
   */
  y: number;
  [k: string]: unknown;
}
/**
 * Output VRR to set.
 */
export interface VrrToSet {
  /**
   * Whether to enable variable refresh rate.
   */
  vrr: boolean;
  /**
   * Only enable when the output shows a window matching the variable-refresh-rate window rule.
   */
  on_demand: boolean;
  [k: string]: unknown;
}
