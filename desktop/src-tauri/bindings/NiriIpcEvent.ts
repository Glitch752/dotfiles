/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A compositor event.
 */
export type Event =
  | {
      WorkspacesChanged: {
        /**
         * The new workspace configuration.
         *
         * This configuration completely replaces the previous configuration. I.e. if any workspaces are missing from here, then they were deleted.
         */
        workspaces: Workspace[];
        [k: string]: unknown;
      };
    }
  | {
      WorkspaceUrgencyChanged: {
        /**
         * Id of the workspace.
         */
        id: number;
        /**
         * Whether this workspace has an urgent window.
         */
        urgent: boolean;
        [k: string]: unknown;
      };
    }
  | {
      WorkspaceActivated: {
        /**
         * Id of the newly active workspace.
         */
        id: number;
        /**
         * Whether this workspace also became focused.
         *
         * If `true`, this is now the single focused workspace. All other workspaces are no longer focused, but they may remain active on their respective outputs.
         */
        focused: boolean;
        [k: string]: unknown;
      };
    }
  | {
      WorkspaceActiveWindowChanged: {
        /**
         * Id of the workspace on which the active window changed.
         */
        workspace_id: number;
        /**
         * Id of the new active window, if any.
         */
        active_window_id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      WindowsChanged: {
        /**
         * The new window configuration.
         *
         * This configuration completely replaces the previous configuration. I.e. if any windows are missing from here, then they were closed.
         */
        windows: Window[];
        [k: string]: unknown;
      };
    }
  | {
      WindowOpenedOrChanged: {
        /**
         * The new or updated window.
         *
         * If the window is focused, all other windows are no longer focused.
         */
        window: Window;
        [k: string]: unknown;
      };
    }
  | {
      WindowClosed: {
        /**
         * Id of the removed window.
         */
        id: number;
        [k: string]: unknown;
      };
    }
  | {
      WindowFocusChanged: {
        /**
         * Id of the newly focused window, or `None` if no window is now focused.
         */
        id?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      WindowUrgencyChanged: {
        /**
         * Id of the window.
         */
        id: number;
        /**
         * The new urgency state of the window.
         */
        urgent: boolean;
        [k: string]: unknown;
      };
    }
  | {
      KeyboardLayoutsChanged: {
        /**
         * The new keyboard layout configuration.
         */
        keyboard_layouts: KeyboardLayouts;
        [k: string]: unknown;
      };
    }
  | {
      KeyboardLayoutSwitched: {
        /**
         * Index of the newly active layout.
         */
        idx: number;
        [k: string]: unknown;
      };
    }
  | {
      OverviewOpenedOrClosed: {
        /**
         * The new state of the overview.
         */
        is_open: boolean;
        [k: string]: unknown;
      };
    };

/**
 * A workspace.
 */
export interface Workspace {
  /**
   * Unique id of this workspace.
   *
   * This id remains constant regardless of the workspace moving around and across monitors.
   *
   * Do not assume that workspace ids will always increase without wrapping, or start at 1. That is an implementation detail subject to change. For example, ids may change to be randomly generated for each new workspace.
   */
  id: number;
  /**
   * Index of the workspace on its monitor.
   *
   * This is the same index you can use for requests like `niri msg action focus-workspace`.
   *
   * This index *will change* as you move and re-order workspace. It is merely the workspace's current position on its monitor. Workspaces on different monitors can have the same index.
   *
   * If you need a unique workspace id that doesn't change, see [`Self::id`].
   */
  idx: number;
  /**
   * Optional name of the workspace.
   */
  name?: string | null;
  /**
   * Name of the output that the workspace is on.
   *
   * Can be `None` if no outputs are currently connected.
   */
  output?: string | null;
  /**
   * Whether the workspace currently has an urgent window in its output.
   */
  is_urgent: boolean;
  /**
   * Whether the workspace is currently active on its output.
   *
   * Every output has one active workspace, the one that is currently visible on that output.
   */
  is_active: boolean;
  /**
   * Whether the workspace is currently focused.
   *
   * There's only one focused workspace across all outputs.
   */
  is_focused: boolean;
  /**
   * Id of the active window on this workspace, if any.
   */
  active_window_id?: number | null;
  [k: string]: unknown;
}
/**
 * Toplevel window.
 */
export interface Window {
  /**
   * Unique id of this window.
   *
   * This id remains constant while this window is open.
   *
   * Do not assume that window ids will always increase without wrapping, or start at 1. That is an implementation detail subject to change. For example, ids may change to be randomly generated for each new window.
   */
  id: number;
  /**
   * Title, if set.
   */
  title?: string | null;
  /**
   * Application ID, if set.
   */
  app_id?: string | null;
  /**
   * Process ID that created the Wayland connection for this window, if known.
   *
   * Currently, windows created by xdg-desktop-portal-gnome will have a `None` PID, but this may change in the future.
   */
  pid?: number | null;
  /**
   * Id of the workspace this window is on, if any.
   */
  workspace_id?: number | null;
  /**
   * Whether this window is currently focused.
   *
   * There can be either one focused window or zero (e.g. when a layer-shell surface has focus).
   */
  is_focused: boolean;
  /**
   * Whether this window is currently floating.
   *
   * If the window isn't floating then it is in the tiling layout.
   */
  is_floating: boolean;
  /**
   * Whether this window requests your attention.
   */
  is_urgent: boolean;
  [k: string]: unknown;
}
/**
 * Configured keyboard layouts.
 */
export interface KeyboardLayouts {
  /**
   * XKB names of the configured layouts.
   */
  names: string[];
  /**
   * Index of the currently active layout in `names`.
   */
  current_idx: number;
  [k: string]: unknown;
}
